# docker-compose.ec2.yml - EC2テスト環境用
version: '3.8'

services:
  # Web アプリケーション
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=staging
      - DB_HOST=db
      - DB_USERNAME=quested_user
      - DB_PASSWORD=QuEsTeDsEcUrE2024!
      - DB_NAME=quested_ec2
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-ec2-test-secret-key-change-this-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/var/log/quested
    networks:
      - quested_ec2_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # データベース (MySQL)
  db:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=RoOtPaSsWoRd2024!
      - MYSQL_DATABASE=quested_ec2
      - MYSQL_USER=quested_user
      - MYSQL_PASSWORD=QuEsTeDsEcUrE2024!
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --skip-character-set-client-handshake
      --max_connections=200
      --innodb_buffer_pool_size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pRoOtPaSsWoRd2024!"]
      timeout: 20s
      retries: 10
      interval: 10s
    networks:
      - quested_ec2_network
    restart: unless-stopped

  # Redis (キャッシュ・セッション)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - quested_ec2_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx (リバースプロキシ)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - app_uploads:/var/www/uploads
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - quested_ec2_network
    restart: unless-stopped

  # Celery Worker (バックグラウンドタスク)
  celery:
    build: .
    command: celery -A run.celery worker --loglevel=info --concurrency=2
    environment:
      - FLASK_ENV=staging
      - DB_HOST=db
      - DB_USERNAME=quested_user
      - DB_PASSWORD=QuEsTeDsEcUrE2024!
      - DB_NAME=quested_ec2
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-ec2-test-secret-key-change-this-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - app_logs:/var/log/quested
    networks:
      - quested_ec2_network
    restart: unless-stopped

  # Celery Beat (定期タスク)
  celery-beat:
    build: .
    command: celery -A run.celery beat --loglevel=info
    environment:
      - FLASK_ENV=staging
      - DB_HOST=db
      - DB_USERNAME=quested_user
      - DB_PASSWORD=QuEsTeDsEcUrE2024!
      - DB_NAME=quested_ec2
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-ec2-test-secret-key-change-this-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - app_logs:/var/log/quested
    networks:
      - quested_ec2_network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  quested_ec2_network:
    driver: bridge