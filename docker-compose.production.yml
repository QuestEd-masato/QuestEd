# docker-compose.production.yml - 本番環境用
version: '3.8'

services:
  # Web アプリケーション
  web:
    build: 
      context: .
      dockerfile: Dockerfile.production
    restart: always
    environment:
      - FLASK_ENV=production
      - DB_HOST=${RDS_ENDPOINT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=quested_production
      - REDIS_URL=${ELASTICACHE_REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=WARNING
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/var/log/quested
    networks:
      - quested_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx (リバースプロキシ・SSL終端)
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
      - app_uploads:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - quested_prod_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Celery Worker (バックグラウンドタスク)
  celery:
    build: 
      context: .
      dockerfile: Dockerfile.production
    command: celery -A run.celery worker --loglevel=warning --concurrency=2 --max-tasks-per-child=1000
    restart: always
    environment:
      - FLASK_ENV=production
      - DB_HOST=${RDS_ENDPOINT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=quested_production
      - REDIS_URL=${ELASTICACHE_REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/var/log/quested
    networks:
      - quested_prod_network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Celery Beat (定期タスク)
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile.production
    command: celery -A run.celery beat --loglevel=warning
    restart: always
    environment:
      - FLASK_ENV=production
      - DB_HOST=${RDS_ENDPOINT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=quested_production
      - REDIS_URL=${ELASTICACHE_REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - app_logs:/var/log/quested
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - quested_prod_network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ログ収集 (Fluent Bit)
  log-collector:
    image: fluent/fluent-bit:latest
    restart: always
    volumes:
      - app_logs:/var/log/quested:ro
      - nginx_logs:/var/log/nginx:ro
      - ./deployment/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    environment:
      - AWS_REGION=${AWS_REGION}
    networks:
      - quested_prod_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # メトリクス収集 (Prometheus Node Exporter)
  node-exporter:
    image: prom/node-exporter:latest
    restart: always
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - quested_prod_network
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

volumes:
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/quested/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/quested
  nginx_logs:
    driver: local
  celery_beat_data:
    driver: local

networks:
  quested_prod_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16